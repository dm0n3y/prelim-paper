@inproceedings{BlocksFingertips,
 author = {Monig, Jens and Ohshima, Yoshiki and Maloney, John},
 title = {Blocks at Your Fingertips: Blurring the Line Between Blocks and Text in GP},
 booktitle = {Proceedings of the 2015 IEEE Blocks and Beyond Workshop (Blocks and Beyond)},
 series = {BLOCKS AND BEYOND '15},
 year = {2015},
 isbn = {978-1-4673-8367-7},
 pages = {51--53},
 numpages = {3},
 url = {http://dx.doi.org/10.1109/BLOCKS.2015.7369001},
 doi = {10.1109/BLOCKS.2015.7369001},
 acmid = {2878706},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

@inproceedings{Hazelnut,
  author    = {Cyrus Omar and
               Ian Voysey and
               Michael Hilton and
               Jonathan Aldrich and
               Matthew A. Hammer},
  title     = {Hazelnut: a bidirectionally typed structure editor calculus},
  booktitle = {Proceedings of the 44th {ACM} {SIGPLAN} Symposium on Principles of
               Programming Languages, {POPL} 2017, Paris, France, January 18-20,
               2017},
  pages     = {86--99},
  year      = {2017},
  crossref  = {DBLP:conf/popl/2017},
  url       = {http://dl.acm.org/citation.cfm?id=3009900},
  timestamp = {Tue, 06 Nov 2018 11:07:42 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/popl/OmarVHAH17},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/popl/2017,
  editor    = {Giuseppe Castagna and
               Andrew D. Gordon},
  title     = {Proceedings of the 44th {ACM} {SIGPLAN} Symposium on Principles of
               Programming Languages, {POPL} 2017, Paris, France, January 18-20,
               2017},
  publisher = {{ACM}},
  year      = {2017},
  url       = {https://doi.org/10.1145/3009837},
  doi       = {10.1145/3009837},
  isbn      = {978-1-4503-4660-3},
  timestamp = {Tue, 06 Nov 2018 11:07:42 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/popl/2017},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{HazelnutLive,
  author    = {Cyrus Omar and
               Ian Voysey and
               Ravi Chugh and
               Matthew A. Hammer},
  title     = {Live functional programming with typed holes},
  journal   = {{PACMPL}},
  volume    = {3},
  number    = {{POPL}},
  pages     = {14:1--14:32},
  year      = {2019},
  url       = {https://doi.org/10.1145/3290327},
  doi       = {10.1145/3290327},
  timestamp = {Fri, 10 May 2019 11:01:57 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/pacmpl/OmarVCH19},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Cornell,
 author = {Teitelbaum, Tim and Reps, Thomas},
 title = {The Cornell Program Synthesizer: A Syntax-directed Programming Environment},
 journal = {Commun. ACM},
 issue_date = {Sept. 1981},
 volume = {24},
 number = {9},
 month = sep,
 year = {1981},
 issn = {0001-0782},
 pages = {563--573},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/358746.358755},
 doi = {10.1145/358746.358755},
 acmid = {358755},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {diagnostic interpreter, program development system, programming environment, source language debugger, syntax-directed editor, template},
}

@inproceedings{ProjEfficiency,
 author = {Berger, Thorsten and V\"{o}lter, Markus and Jensen, Hans Peter and Dangprasert, Taweesap and Siegmund, Janet},
 title = {Efficiency of Projectional Editing: A Controlled Experiment},
 booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2016},
 year = {2016},
 isbn = {978-1-4503-4218-6},
 location = {Seattle, WA, USA},
 pages = {763--774},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2950290.2950315},
 doi = {10.1145/2950290.2950315},
 acmid = {2950315},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {experiment, language workbench, projectional editing},
}

@inproceedings{GrammarCells,
 author = {Voelter, Markus and Szab\'{o}, Tam\'{a}s and Lisson, Sascha and Kolb, Bernd and Erdweg, Sebastian and Berger, Thorsten},
 title = {Efficient Development of Consistent Projectional Editors Using Grammar Cells},
 booktitle = {Proceedings of the 2016 ACM SIGPLAN International Conference on Software Language Engineering},
 series = {SLE 2016},
 year = {2016},
 isbn = {978-1-4503-4447-0},
 location = {Amsterdam, Netherlands},
 pages = {28--40},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2997364.2997365},
 doi = {10.1145/2997364.2997365},
 acmid = {2997365},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Jetbrains MPS, Language Engineering, Language Workbenches, Projectional Editing, Usability},
}

@InProceedings{TowardUserFriendly,
author="Voelter, Markus
and Siegmund, Janet
and Berger, Thorsten
and Kolb, Bernd",
editor="Combemale, Beno{\^i}t
and Pearce, David J.
and Barais, Olivier
and Vinju, Jurgen J.",
title="Towards User-Friendly Projectional Editors",
booktitle="Software Language Engineering",
year="2014",
publisher="Springer International Publishing",
address="Cham",
pages="41--61",
abstract="Today's challenges for language development include language extension and composition, as well as the use of diverse notations. A promising approach is projectional editing, a technique to directly manipulate the abstract syntax tree of a program, without relying on parsers. Its potential lies in the ability to combine diverse notational styles -- such as text, symbols, tables, and graphics -- and the support for a wide range of composition techniques. However, projectional editing is often perceived as problematic for developers. Expressed drawbacks include the unfamiliar editing experience and challenges in the integration with existing infrastructure. In this paper we investigate the usability of projectional editors. We systematically identify usability issues resulting from the architecture. We use JetBrains Meta Programming System (MPS) as a case study. The case study discusses the concepts that MPS incorporates to address the identified issues, evaluates effectiveness of these concepts by surveying professional developers, and reports industrial experiences from realizing large-scale systems. Our results show that the benefits of flexible language composition and diverse notations come at the cost of serious usability issues -- which, however, can be effectively mitigated with facilities that emulate editing experience of parser-based editors.",
isbn="978-3-319-11245-9"
}



@inproceedings{Guo13,
  author    = {Philip J. Guo},
  title     = {Online python tutor: embeddable web-based program visualization for
               cs education},
  booktitle = {The 44th {ACM} Technical Symposium on Computer Science Education,
               {SIGCSE} '13, Denver, CO, USA, March 6-9, 2013},
  pages     = {579--584},
  year      = {2013},
}

@article{DBLP:journals/jfp/Wakeling07,
  author    = {David Wakeling},
  title     = {Spreadsheet functional programming},
  journal   = {J. Funct. Program.},
  volume    = {17},
  number    = {1},
  pages     = {131--143},
  year      = {2007},
  url       = {https://doi.org/10.1017/S0956796806006186},
  doi       = {10.1017/S0956796806006186},
  timestamp = {Sat, 27 May 2017 14:24:34 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/jfp/Wakeling07},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@phdthesis{OmarThesis,
 author = {Omar, Cyrus},
 title = {Reasonably {P}rogrammable {S}yntax},
 year = {2017},
 school = {Carnegie Mellon University},
}

@inproceedings{HazelnutSNAPL,
   author = {Omar, Cyrus and {Voysey}, Ian and {Hilton}, Michael and
             {Sunshine}, Joshua and {Le Goues}, Claire and
             {Aldrich}, Jonathan and {Hammer}, Matthew A.},
    title = {Toward Semantic Foundations for Program Editors},
 booktitle = {Summit on Advances in Programming Languages (SNAPL)},
     year = {2017},
     sortyear={2017-2},
}

@inproceedings{sns-pldi,
 author    = {Ravi Chugh and Brian Hempel and Mitchell Spradlin and Jacob Albers},
 title     = {Programmatic and {D}irect {M}anipulation, {T}ogether at {L}ast},
 booktitle = {Conference on Programming Language Design and Implementation (PLDI)},
 year      = {2016},
 no_note   = {Extended version available as \textit{CoRR abs/1507.02988v3}},
}

@inproceedings{sns-uist,
 author    = {Brian Hempel and Ravi Chugh},
 title     = {Semi-{A}utomated {S}{V}{G} {P}rogramming via {D}irect {M}anipulation},
 booktitle = {Symposium on User Interface Software and Technology (UIST)},
 year      = {2016},
}

@unpublished{sns-project,
 author = "{Chugh, Ravi}",
 title  = "Sketch-n-{S}ketch",
 note   = "\url{http://ravichugh.github.io/sketch-n-sketch}"
}

@unpublished{incr-dom,
 author = "{Jane Street}",
 title  = "Incr{\_}dom",
 note   = "\url{https://github.com/janestreet/incr_dom}"
}


@inproceedings{DBLP:conf/aplas/RadanneVB16,
  author    = {Gabriel Radanne and
               J{\'{e}}r{\^{o}}me Vouillon and
               Vincent Balat},
  editor    = {Atsushi Igarashi},
  title     = {Eliom: {A} Core {ML} Language for Tierless Web Programming},
  booktitle = {Programming Languages and Systems - 14th Asian Symposium, {APLAS}
               2016, Hanoi, Vietnam, November 21-23, 2016, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {10017},
  pages     = {377--397},
  year      = {2016},
  url       = {https://doi.org/10.1007/978-3-319-47958-3_20},
  doi       = {10.1007/978-3-319-47958-3_20},
  timestamp = {Fri, 19 May 2017 01:25:54 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/aplas/RadanneVB16},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}



@inproceedings{Amorim2016,
 author = {Amorim, Lu\'{\i}s Eduardo de Souza and Erdweg, Sebastian and
           Wachsmuth, Guido and Visser, Eelco},
 title = {Principled {S}yntactic {C}ode {C}ompletion {U}sing {P}laceholders},
 booktitle = {ACM SIGPLAN International Conference on Software Language Engineering (SLE)},
 year = {2016},
}

@inproceedings{Reichenbach2009,
 author = {Reichenbach, Christoph and Coughlin, Devin and Diwan, Amer},
 title = {Program {M}etamorphosis},
 booktitle = {European Conference on Object-Oriented Programming (ECOOP)},
 year = {2009},
}

@phdthesis{SketchpadThesis,
 author = {Ivan Sutherland},
 title = {Sketchpad, {A} {M}an-{M}achine {G}raphical
          {C}ommunication {S}ystem},
 year = {1963},
 school = {MIT},
}

@article{Borning1981,
 author = {Borning, Alan},
 title = {The {P}rogramming {L}anguage {A}spects of {T}hing{L}ab},
 journal = {Transactions on Programming Languages and Systems (TOPLAS)},
 month = {October},
 year = {1981},
}

@Unpublished{Processing,
  author  = "{Ben Fry and Casey Reas}",
  title   = "Processing",
  note    = "\url{https://processing.org/}"
}

@inproceedings{WangEtAl,
 author = {Wang, Xiaoyin and Zhang, Lu and Xie, Tao and Xiong, Yingfei and Mei, Hong},
 title = {Automating {P}resentation {C}hanges in {D}ynamic {W}eb {A}pplications via {C}ollaborative {H}ybrid {A}nalysis},
 booktitle = {International Symposium on the Foundations of Software Engineering (FSE)},
 year = {2012},
}

@inproceedings{PBM,
 author = {Hottelier, Thibaud and Bodik, Ras and Ryokai, Kimiko},
 title = {Programming by {M}anipulation for {L}ayout},
 booktitle = {Symposium on User Interface Software and Technology (UIST)},
 year = {2014},
}

@article{czaplicki2012elm,
  title={Elm: Concurrent frp for functional guis},
  author={Czaplicki, Evan},
  journal={Senior thesis, Harvard University},
  year={2012}
}

@article{Hanpuku,
  author    = {Alex Bigelow and Steven M. Drucker and Danyel Fisher and Miriah D. Meyer},
  title     = {Iterating {B}etween {T}ools to {C}reate and {E}dit {V}isualizations},
  journal   = {{IEEE} Transactions on Visualizations and Computer Graphics},
  year      = {2017},
}

@inproceedings{Greenfoot,
 author = {Neil Christopher Charles Brown and
           Amjad Altadmri and Michael K{\"o}lling},
 title = {Frame-{B}ased {E}diting: {C}ombining the {B}est of {B}locks
          and {T}ext {P}rogramming},
 booktitle = {Conference on Learning and Teaching in Computing and
              Engineering (LaTiCE)},
 year = {2016},
}

@inproceedings{TouchDevelop,
 author = {Tillmann, Nikolai and Moskal, Michal and de Halleux, Jonathan and
           Fahndrich, Manuel and Burckhardt, Sebastian},
 title = {Touch{D}evelop: {A}pp {D}evelopment on {M}obile {D}evices},
 booktitle = {International Symposium on the Foundations of Software Engineering (FSE)},
 year = {2012},
}

@unpublished{ElmArchitecture,
 author = "{Czaplicki, Evan}",
 title  = "Elm {A}rchitecture",
 note   = "\url{https://guide.elm-lang.org/architecture/}"
}

@unpublished{Elm,
 author = {Evan Czaplicki},
 title  = "An Introduction to Elm",
 note   = "\url{https://guide.elm-lang.org/}. Retrieved Apr. 7, 2018.",
 year = {2018}
}

@unpublished{VictorDrawing,
  author  = "{Victor, Bret}",
  title   = "Drawing {D}ynamic {V}isualizations",
  note    = "\url{http://worrydream.com/#!/DrawingDynamicVisualizationsTalk}"
}

@unpublished{McDirmid,
  author  = "{McDirmid, Sean}",
  title   = "A {L}ive {P}rogramming {E}xperience",
  note    = "Future Programming Workshop, StrangeLoop 2015. \url{https://www.youtube.com/watch?v=YLrdhFEAiqo}"
}

@inproceedings{sns-deuce,
 author    = {Brian Hempel and Justin Lubin and Grace Lu and Ravi Chugh},
 title     = {Deuce: {A} {L}ightweight {U}ser {I}nterface for
              {S}tructured {E}diting},
 booktitle = {International Conference on Software Engineering (ICSE)},
 year = {2018},
}

@inproceedings{DNDRefactoring,
 author    = {Lee, Yun Young and Chen, Nicholas and Johnson, Ralph E.},
 title     = {Drag-and-{D}rop {R}efactoring: {I}ntuitive and {E}fficient
              {P}rogram {T}ransformation},
 booktitle = {International Conference on Software Engineering (ICSE)},
 year      = {2013},
}


@article{TLMs,
  Author = {Cyrus Omar and Jonathan Aldrich},
  journal = {Proceedings of the ACM on Programming Languages (PACMPL), Issue ICFP},
  Title = {Reasonably {P}rogrammable {L}iteral {N}otation},
  Year = {2018},
}

@unpublished{SSS,
 author    = {Brian Hempel and Ravi Chugh},
 title     = {Deriving {S}tructured {T}ext {E}ditors},
 note      = {Draft},
 year      = {2019},
}

@inproceedings{hazeltutor,
 author    = {Potter, Hannah and Omar, Cyrus},
 title     = {Hazel Tutor: Guiding Novices Through Type-Driven Development Strategies},
 booktitle = {HATRA},
 year      = {2020},
}

@inproceedings{weitnauer2016graspable,
  title={Graspable math: Towards dynamic algebra notations that support learners better than paper},
  author={Weitnauer, Erik and Landy, David and Ottmar, Erin},
  booktitle={2016 Future Technologies Conference (FTC)},
  pages={406--414},
  year={2016},
  organization={IEEE}
}

@article{meta-analysis-blocks,
author = {Yue Hu and Cheng-Huan Chen and Chien-Yuan Su},
title ={Exploring the Effectiveness and Moderators of Block-Based Visual Programming on Student Learning: A Meta-Analysis},
journal = {Journal of Educational Computing Research},
volume = {58},
number = {8},
pages = {1467-1493},
year = {2021},
doi = {10.1177/0735633120945935},
URL = {https://doi.org/10.1177/0735633120945935},
eprint = {https://doi.org/10.1177/0735633120945935}
}

@inproceedings{rousillon,
author = {Chasins, Sarah E. and Mueller, Maria and Bodik, Rastislav},
title = {Rousillon: Scraping Distributed Hierarchical Web Data},
year = {2018},
isbn = {9781450359481},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3242587.3242661},
doi = {10.1145/3242587.3242661},
abstract = {Programming by Demonstration (PBD) promises to enable data scientists to collect web
data. However, in formative interviews with social scientists, we learned that current
PBD tools are insufficient for many real-world web scraping tasks. The missing piece
is the capability to collect hierarchically-structured data from across many different
webpages. We present Rousillon, a programming system for writing complex web automation
scripts by demonstration. Users demonstrate how to collect the first row of a 'universal
table' view of a hierarchical dataset to teach Rousillon how to collect all rows.
To offer this new demonstration model, we developed novel relation selection and generalization
algorithms. In a within-subject user study on 15 computer scientists, users can write
hierarchical web scrapers 8 times more quickly with Rousillon than with traditional
programming.},
booktitle = {Proceedings of the 31st Annual ACM Symposium on User Interface Software and Technology},
pages = {963–975},
numpages = {13},
keywords = {programming by demonstration, generalization, web scraping, data science, program synthesis, end-user programming},
location = {Berlin, Germany},
series = {UIST '18}
}

@article{mbeddr,
author = {Voelter, Markus and Kolb, Bernd and Szab\'{o}, Tam\'{a}s and Ratiu, Daniel and Deursen, Arie},
title = {Lessons Learned from Developing Mbeddr: A Case Study in Language Engineering with MPS},
year = {2019},
issue_date = {February  2019},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {18},
number = {1},
issn = {1619-1366},
url = {https://doi.org/10.1007/s10270-016-0575-4},
doi = {10.1007/s10270-016-0575-4},
abstract = {Language workbenches are touted as a promising technology to engineer languages for
use in a wide range of domains, from programming to science to business. However,
not many real-world case studies exist that evaluate the suitability of language workbench
technology for this task. This paper contains such a case study. In particular, we
evaluate the development of mbeddr, a collection of integrated languages and language
extensions built with the Jetbrains MPS language workbench. mbeddr consists of 81
languages, with their IDE support, 34 of them C extensions. The mbeddr languages use
a wide variety of notations--textual, tabular, symbolic and graphical--and the C extensions
are modular; new extensions can be added without changing the existing implementation
of C. mbeddr's development has spanned 10 person-years so far, and the tool is used
in practice and continues to be developed. This makes mbeddr a meaningful case study
of non-trivial size and complexity. The evaluation is centered around five research
questions: language modularity, notational freedom and projectional editing, mechanisms
for managing complexity, performance and scalability issues and the consequences for
the development process. We draw generally positive conclusions; language engineering
with MPS is ready for real-world use. However, we also identify a number of areas
for improvement in the state of the art in language engineering in general, and in
MPS in particular.},
journal = {Softw. Syst. Model.},
month = feb,
pages = {585–630},
numpages = {46},
keywords = {Language engineering, Language workbenches, Language extension, Experimentation, Languages, Domain-specific language, Case study}
}

@article{fine-tuning-selection-semantics,
author = {Goldenson, Dennis R. and Lewis, Marjorie B.},
title = {Fine Tuning Selection Semantics in a Structure Editor Based Programming Environment: Some Experimental Results},
year = {1988},
issue_date = {Oct. 1988},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {20},
number = {2},
issn = {0736-6906},
url = {https://doi-org.proxy.lib.umich.edu/10.1145/54386.54400},
doi = {10.1145/54386.54400},
abstract = {Structure editing holds much promise for improving the quality of introductory programming
education. However early structure editors have often been clumsy and counter intuitive
to use. This study reports the results of a laboratory experiment in which the user
interface of a structure editing environment was modified in several ways to make
its semantics more closely resemble what students seem naturally to expect. Analysis
suggests that it is possible to improve students' editing performance, without getting
bogged down in unnecessary details of language and environmental semantics.},
journal = {SIGCHI Bull.},
month = oct,
pages = {38–43},
numpages = {6}
}

@article{user-modeling,
author = {Neal, Lisa Rubin},
title = {Cognition-Sensitive Design and User Modeling for Syntax-Directed Editors},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi-org.proxy.lib.umich.edu/10.1145/1165387.30866},
doi = {10.1145/1165387.30866},
abstract = {Syntax-directed editors were created with the intent of aiding in and improving the
programming process. Despite their potential, they have not been successful, as evidenced
by limited use. In general, they are perceived as being too difficult to use and the
benefits of their use are outweighed by the difficulties.We believe that the cognitive
styles and skills of the users have been ignored in the design process. In this paper
we present some of our initial results which show that cognitive styles vary over
a significant spectrum and that their consideration in the design of a syntax-directed
editor will result in an intelligent tool that will be right for the cognitive skills
and expertise of an individual user. In turn, an approach to design that takes cognitive
variation into account would support the construction of syntax-directed editors which
are successfully used.},
journal = {SIGCHI Bull.},
month = may,
pages = {99–102},
numpages = {4}
}

@InProceedings{practical-lang-based-editing,
author="Van De Vanter, Michael L.",
editor="Taylor, Richard N.
and Coutaz, Jo{\"e}lle",
title="Practical language-based editing for software engineers",
booktitle="Software Engineering and Human-Computer Interaction",
year="1995",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="251--267",
abstract="Language-based editing systems have the potential to become a practical, central, and powerful part of every software engineer's toolkit, but progress has been limited by inattention to user-centered design issues. Major usability requirements for such systems include familiar, unrestricted text editing; coherent user interaction with software; rich, dynamic information display; multiple alternative views; uninterrupted service in the presence of ill-formedness, incompleteness, and inconsistency; description-driven support for multiple languages; and extensibility and customizability. Solutions require better understanding of software engineers and their tasks, appropriate design metaphors, new architectural organizations, and design for adaptation and extension.",
isbn="978-3-540-49173-6"
}

@inproceedings{lang-on-the-usefulness,
author = {Lang, Bernard},
title = {On the Usefulness of Syntax Directed Editors},
year = {1986},
isbn = {3540171894},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Proceedings of an International Workshop on Advanced Programming Environments},
pages = {47–51},
numpages = {5}
}

@article{psg,
title = {Design and structure of a semantics-based programming environment},
journal = {International Journal of Man-Machine Studies},
volume = {37},
number = {4},
pages = {467-479},
year = {1992},
note = {Structure-based editors and environments},
issn = {0020-7373},
doi = {https://doi.org/10.1016/0020-7373(92)90005-6},
url = {https://www.sciencedirect.com/science/article/pii/0020737392900056},
author = {R. Bahlke and G. Snelting},
abstract = {We present, from a user's point of view, an overview of the PSG system, a generator for semantics-based programming environments. The PSG system generates an interactive, language-specific environment from a complete formal language definition. Both the syntax, as well as the static and dynamic semantics of the language are specified in the definition. The definition is used to generate a context-sensitive hybrid editor and an interactive interpreter with debugging facilities. The paper describes the structure and the main features of PSG-generated environments, as well as the design decisions which led to the development of the PSG environment.}
}

@article{Minor92,
  author    = {Sten Min{\"{o}}r},
  title     = {Interacting with Structure-Oriented Editors},
  journal   = {Int. J. Man Mach. Stud.},
  volume    = {37},
  number    = {4},
  pages     = {399--418},
  year      = {1992},
  url       = {https://doi.org/10.1016/0020-7373(92)90002-3},
  doi       = {10.1016/0020-7373(92)90002-3},
  timestamp = {Fri, 15 May 2020 17:13:33 +0200},
  biburl    = {https://dblp.org/rec/journals/ijmms/Minor92.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{scratch,
author = {Maloney, John and Resnick, Mitchel and Rusk, Natalie and Silverman, Brian and Eastmond, Evelyn},
title = {The Scratch Programming Language and Environment},
year = {2010},
issue_date = {November 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {10},
number = {4},
url = {https://doi.org/10.1145/1868358.1868363},
doi = {10.1145/1868358.1868363},
abstract = {Scratch is a visual programming environment that allows users (primarily ages 8 to
16) to learn computer programming while working on personally meaningful projects
such as animated stories and games. A key design goal of Scratch is to support self-directed
learning through tinkering and collaboration with peers. This article explores how
the Scratch programming language and environment support this goal.},
journal = {ACM Trans. Comput. Educ.},
month = nov,
articleno = {16},
numpages = {15},
keywords = {visual programming language, programming environment, programming language, Scratch}
}

@INPROCEEDINGS{BasHermans21,
  author={Jansen, Bas and Hermans, Felienne},
  booktitle={2021 IEEE/ACM 29th International Conference on Program Comprehension (ICPC)},
  title={The Effect of a Block-based Language on Formula Comprehension in Spreadsheets},
  year={2021},
  volume={},
  number={},
  pages={288-299},
  doi={10.1109/ICPC52881.2021.00035}}

@article{blocks-text-high-school,
author = {Weintrop, David and Wilensky, Uri},
title = {Comparing Block-Based and Text-Based Programming in High School Computer Science Classrooms},
year = {2017},
issue_date = {December 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {1},
url = {https://doi-org.proxy.lib.umich.edu/10.1145/3089799},
doi = {10.1145/3089799},
abstract = {The number of students taking high school computer science classes is growing. Increasingly,
these students are learning with graphical, block-based programming environments either
in place of or prior to traditional text-based programming languages. Despite their
growing use in formal settings, relatively little empirical work has been done to
understand the impacts of using block-based programming environments in high school
classrooms. In this article, we present the results of a 5-week, quasi-experimental
study comparing isomorphic block-based and text-based programming environments in
an introductory high school programming class. The findings from this study show students
in both conditions improved their scores between pre- and postassessments; however,
students in the blocks condition showed greater learning gains and a higher level
of interest in future computing courses. Students in the text condition viewed their
programming experience as more similar to what professional programmers do and as
more effective at improving their programming ability. No difference was found between
students in the two conditions with respect to confidence or enjoyment. The implications
of these findings with respect to pedagogy and design are discussed, along with directions
for future work.},
journal = {ACM Trans. Comput. Educ.},
month = oct,
articleno = {3},
numpages = {25},
keywords = {programming environments, design, Block-based programming}
}



@inproceedings{coblox,
  author    = {David Weintrop and
               Afsoon Afzal and
               Jean Salac and
               Patrick Francis and
               Boyang Li and
               David C. Shepherd and
               Diana Franklin},
  editor    = {Regan L. Mandryk and
               Mark Hancock and
               Mark Perry and
               Anna L. Cox},
  title     = {Evaluating CoBlox: {A} Comparative Study of Robotics Programming Environments
               for Adult Novices},
  booktitle = {Proceedings of the 2018 {CHI} Conference on Human Factors in Computing
               Systems, {CHI} 2018, Montreal, QC, Canada, April 21-26, 2018},
  pages     = {366},
  publisher = {{ACM}},
  year      = {2018},
  url       = {https://doi.org/10.1145/3173574.3173940},
  doi       = {10.1145/3173574.3173940},
  timestamp = {Thu, 24 Jun 2021 13:34:38 +0200},
  biburl    = {https://dblp.org/rec/conf/chi/WeintropASFLSF18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@INPROCEEDINGS{cog-dim-blocks,
author={Holwerda, Robert and Hermans, Felienne},
booktitle={2018 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)},
title={A Usability Analysis of Blocks-based Programming Editors using Cognitive Dimensions},
year={2018},
volume={},
number={},
pages={217-225},
doi={10.1109/VLHCC.2018.8506483}
}

@article{blocks-and-beyond,
author = {Bau, David and Gray, Jeff and Kelleher, Caitlin and Sheldon, Josh and Turbak, Franklyn},
title = {Learnable Programming: Blocks and Beyond},
year = {2017},
issue_date = {June 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {60},
number = {6},
issn = {0001-0782},
url = {https://doi-org.proxy.lib.umich.edu/10.1145/3015455},
doi = {10.1145/3015455},
abstract = {New blocks frameworks open doors to greater experimentation for novices and professionals
alike.},
journal = {Commun. ACM},
month = may,
pages = {72–80},
numpages = {9}
}

@article{MillerPMV94,
  author    = {Philip Miller and
               John Pane and
               Glenn Meter and
               Scott A. Vorthmann},
  title     = {Evolution of Novice Programming Environments: The Structure Editors
               of Carnegie Mellon University},
  journal   = {Interact. Learn. Environ.},
  volume    = {4},
  number    = {2},
  pages     = {140--158},
  year      = {1994},
  url       = {https://doi.org/10.1080/1049482940040202},
  doi       = {10.1080/1049482940040202},
  timestamp = {Sun, 20 Jun 2021 23:52:44 +0200},
  biburl    = {https://dblp.org/rec/journals/ile/MillerPMV94.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{cog-dim,
title = {Usability Analysis of Visual Programming Environments: A ‘Cognitive Dimensions’ Framework},
journal = {Journal of Visual Languages and Computing},
volume = {7},
number = {2},
pages = {131-174},
year = {1996},
issn = {1045-926X},
doi = {https://doi.org/10.1006/jvlc.1996.0009},
url = {https://www.sciencedirect.com/science/article/pii/S1045926X96900099},
author = {T.R.G. Green and M. Petre},
abstract = {The cognitive dimensions framework is a broad-brush evaluation technique for interactive devices and for non-interactive notations. It sets out a small vocabulary of terms designed to capture the cognitively-relevant aspects of structure, and shows how they can be traded off against each other. The purpose of this paper is to propose the framework as an evaluation technique for visual programming environments. We apply it to two commercially-available dataflow languages (with further examples from other systems) and conclude that it is effective and insightful; other HCI-based evaluation techniques focus on different aspects and would make good complements. Insofar as the examples we used are representative, current VPLs are successful in achieving a good ‘closeness of match’, but designers need to consider the ‘viscosity ’ (resistance to local change) and the ‘secondary notation’ (possibility of conveying extra meaning by choice of layout, colour, etc.).}
}

@article{nested-words,
author = {Alur, Rajeev and Madhusudan, P.},
title = {Adding Nesting Structure to Words},
year = {2009},
issue_date = {May 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {56},
number = {3},
issn = {0004-5411},
url = {https://doi.org/10.1145/1516512.1516518},
doi = {10.1145/1516512.1516518},
abstract = {We propose the model of nested words for representation of data with both a linear
ordering and a hierarchically nested matching of items. Examples of data with such
dual linear-hierarchical structure include executions of structured programs, annotated
linguistic data, and HTML/XML documents. Nested words generalize both words and ordered
trees, and allow both word and tree operations. We define nested word automata—finite-state
acceptors for nested words, and show that the resulting class of regular languages
of nested words has all the appealing theoretical properties that the classical regular
word languages enjoys: deterministic nested word automata are as expressive as their
nondeterministic counterparts; the class is closed under union, intersection, complementation,
concatenation, Kleene-*, prefixes, and language homomorphisms; membership, emptiness,
language inclusion, and language equivalence are all decidable; and definability in
monadic second order logic corresponds exactly to finite-state recognizability. We
also consider regular languages of infinite nested words and show that the closure
properties, MSO-characterization, and decidability of decision problems carry over.The
linear encodings of nested words give the class of visibly pushdown languages of words,
and this class lies between balanced languages and deterministic context-free languages.
We argue that for algorithmic verification of structured programs, instead of viewing
the program as a context-free language over words, one should view it as a regular
language of nested words (or equivalently, a visibly pushdown language), and this
would allow model checking of many properties (such as stack inspection, pre-post
conditions) that are not expressible in existing specification logics.We also study
the relationship between ordered trees and nested words, and the corresponding automata:
while the analysis complexity of nested word automata is the same as that of classical
tree automata, they combine both bottom-up and top-down traversals, and enjoy expressiveness
and succinctness benefits over tree automata.},
journal = {J. ACM},
month = may,
articleno = {16},
numpages = {43},
keywords = {XML processing, software model checking, tree automata, Pushdown automata}
}

@inproceedings{visibly-pushdown-langs,
author = {Alur, Rajeev and Madhusudan, P.},
title = {Visibly Pushdown Languages},
year = {2004},
isbn = {1581138520},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.proxy.lib.umich.edu/10.1145/1007352.1007390},
doi = {10.1145/1007352.1007390},
abstract = {We propose the class of visibly pushdown languages as embeddings of context-free languages
that is rich enough to model program analysis questions and yet is tractable and robust
like the class of regular languages. In our definition, the input symbol determines
when the pushdown automaton can push or pop, and thus the stack depth at every position.
We show that the resulting class Vpl of languages is closed under union, intersection,
complementation, renaming, concatenation, and Kleene-*, and problems such as inclusion
that are undecidable for context-free languages are Exptime-complete for visibly pushdown
automata. Our framework explains, unifies, and generalizes many of the decision procedures
in the program analysis literature, and allows algorithmic verification of recursive
programs with respect to many context-free properties including access control properties
via stack inspection and correctness of procedures with respect to pre and post conditions.
We demonstrate that the class Vpl is robust by giving two alternative characterizations:
a logical characterization using the monadic second order (MSO) theory over words
augmented with a binary matching predicate, and a correspondence to regular tree languages.
We also consider visibly pushdown languages of infinite words and show that the closure
properties, MSO-characterization and the characterization in terms of regular trees
carry over. The main difference with respect to the case of finite words turns out
to be determinizability: nondeterministic B\"{u}chi visibly pushdown automata are strictly
more expressive than deterministic Muller visibly pushdown automata.},
booktitle = {Proceedings of the Thirty-Sixth Annual ACM Symposium on Theory of Computing},
pages = {202–211},
numpages = {10},
keywords = {regular tree languages, ω-languages, verification, pushdown automata, logic, context-free languages},
location = {Chicago, IL, USA},
series = {STOC '04}
}
